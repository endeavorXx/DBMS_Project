# drop database megamarket;
show databases;
create database megamarket;
use megamarket;

show tables;

create table customer(
    customer_id integer auto_increment not null,
    first_name varchar(50) not null,
    last_name varchar(50) not null,
    phone_no varchar(50) unique not null ,
    street varchar(50) not null,
    city varchar(50) not null,
    state varchar(50) not null,
    pin_code integer not null,
    password varchar(20) not null,
    primary key (customer_id)
);
create table product(
    product_id      integer         auto_increment  not null,
    name            varchar(50)     not null,
    category        varchar(100)    not null,
    price           double check ( price >=0 )     not null,
    rating          integer check ( rating <= 5 and rating >=0  )   not null,
    qty             integer check ( qty >= 0 )  not null,
    description     varchar(100),
    url varchar(100),                   ## for the image of the item
    primary key (product_id)
);
create table cart(
    customer_id integer not null,
    product_id integer not null,
    product_name varchar(50) not null,
    quantity integer not null,
    price double check (price >= 0) not null,
    total double not null,
    url varchar(100),
    primary key (customer_id,product_id),
    foreign key (customer_id) references customer(customer_id),
    foreign key (product_id) references product(product_id)
);

create table vendor(
    vendor_id integer auto_increment not null ,
    vendor_name varchar(50) not null,
    street varchar(100) not null,
    city varchar(50) not null,
    state varchar(50) not null,
    phone_no varchar(20) unique not null,
    primary key (vendor_id)
);


create table orders
(
    order_id          integer     auto_increment    not null,
    customer_id       integer     not null,
    payment_method    varchar(50) not null,
    amount            double      check(amount >= 0) not null,
    transaction_id    varchar(200)     unique    not null,
    order_date        varchar(50) not null,
    order_time        varchar(50) not null,
    delivery_date     varchar(50) not null,
    delivery_status   varchar(50) not null,
    primary key (order_id)
);

alter table orders add foreign key(customer_id) references customer(customer_id);

create table order_details(
    order_id            integer         not null,
    product_id          integer         not null,
    quantity            double          not null,
    cost_per_piece      double check (cost_per_piece >= 0)  not null,
    total               double          not null,
    primary key (order_id,product_id)
);
alter table order_details add foreign key(order_id) references orders(order_id);
alter table order_details add foreign key(product_id) references product(product_id);

create table supplies(
    supply_id           integer         auto_increment  not null,
    vendor_id           integer         not null,
    product_id          integer         not null,
    qty_supplied        integer         CHECK(qty_supplied > 0)        not null,
    date                date            not null,
    time                time        not null,
    cost_per_piece      double          check(cost_per_piece >= 0)not null,
    total_cost          double          check(total_cost >= 0)not null,
    margin_percentage              double          not null,
    primary key (supply_id),  -- Use a separate primary key
    unique key (vendor_id, product_id, date, time),  -- Ensure uniqueness based on vendor, product, date and time
    foreign key (vendor_id) references vendor(vendor_id),
    foreign key (product_id) references product(product_id)
);

INSERT INTO customer (first_name, last_name, phone_no, street, city, state, pin_code, password)
VALUES
    ('John', 'Doe', '1234567890', '123 Main St', 'New York', 'NY', 10001, 'password1'),
    ('Jane', 'Smith', '9876543210', '456 Elm St', 'Los Angeles', 'CA', 90001, 'password2'),
    ('Michael', 'Johnson', '1112223333', '789 Oak St', 'Chicago', 'IL', 60601, 'password3'),
    ('Emily', 'Brown', '4445556666', '321 Pine St', 'Houston', 'TX', 77001, 'password4'),
    ('David', 'Taylor', '7778889999', '654 Maple St', 'Phoenix', 'AZ', 85001, 'password5'),
    ('Jessica', 'Clark', '2223334444', '987 Cedar St', 'Philadelphia', 'PA', 19019, 'password6'),
    ('Matthew', 'Lewis', '5556667777', '456 Birch St', 'San Antonio', 'TX', 78201, 'password7'),
    ('Sarah', 'Hall', '8889990000', '789 Walnut St', 'San Diego', 'CA', 92101, 'password8'),
    ('Daniel', 'Young', '3334445555', '123 Oak St', 'Dallas', 'TX', 75201, 'password9'),
    ('Olivia', 'King', '9990001111', '456 Pine St', 'San Jose', 'CA', 95101, 'password10');


select* from customer;

INSERT INTO vendor (vendor_name, street, city, state, phone_no)
VALUES
('Fresh Mart', '123 Grocery Lane', 'Springfield', 'Illinois', '555-123-4567'),
('Green Grocer', '456 Produce Street', 'New York City', 'New York', '212-555-6789'),
('Organic Oasis', '789 Health Avenue', 'Los Angeles', 'California', '310-555-1234'),
('Farmers Market', '321 Farm Road', 'Seattle', 'Washington', '206-555-7890'),
('Nature Bounty', '567 Garden Boulevard', 'San Francisco', 'California', '415-555-4321'),
('Gourmet Garden', '890 Epicurean Way', 'Chicago', 'Illinois', '312-555-0987'),
('Healthy Harvest', '234 Wellness Street', 'Boston', 'Massachusetts', '617-555-6543'),
('Fresh Fare', '901 Farm Fresh Lane', 'Dallas', 'Texas', '214-555-3210'),
('Urban Greens', '543 City Plaza', 'Miami', 'Florida', '305-555-8765'),
('Veggie Village', '678 Market Avenue', 'Denver', 'Colorado', '303-555-2345');

INSERT INTO product (name, category, price, rating, qty, description, url)
VALUES
('Whole Milk', 'Dairy', 3, 4, 100, 'Drink Milk stay healthy','A2Milk-min.jpg'),
('Eggs', 'Dairy', 2, 4, 200, 'Farm-fresh eggs','eggs.jpeg'),
('Cheddar Cheese', 'Dairy', 5, 5, 50, 'Sharp and tangy cheddar cheese','cheddar_cheese.jpg'),
('Butter', 'Dairy', 4, 4, 80, 'Rich and creamy butter','butter.jpg'),
('White Bread', 'Grocery', 2, 4, 150, 'Soft and fluffy white bread','download.jpg'),
('Brown Rice', 'Grocery', 3, 5, 100, 'Nutritious and whole-grain brown rice','brown rice.jpg'),
('Pasta', 'Grocery', 2, 4, 120, 'Versatile pasta for various dishes','macaroni.jpg'),
('Olive Oil', 'Grocery', 6, 5, 80, 'High-quality extra virgin olive oil','olive_oil.jpg'),
('Canned Tomatoes', 'Grocery', 3, 4, 100, 'Fresh and juicy canned tomatoes','canned_tomatoes.jpg'),
('Cereal', 'Grocery', 4, 4, 120, 'Crunchy and nutritious breakfast cereal','cereal.jpg');

-- Change the delimiter to $$
DELIMITER $$

-- Create the trigger to update product quantity after inserting into order_details
CREATE TRIGGER order_update_quantity AFTER INSERT ON order_details
FOR EACH ROW
BEGIN
    -- Decrease the quantity of the ordered product
    UPDATE product
    SET qty = qty - NEW.quantity
    WHERE product_id = NEW.product_id;
END$$

-- Change the delimiter back to semicolon
DELIMITER ;

-- Change the delimiter to $$
DELIMITER $$

-- Create the trigger to update product quantity after inserting into supplies
CREATE TRIGGER supply_update_quantity AFTER INSERT ON supplies
FOR EACH ROW
BEGIN
    -- Increase the quantity of the supplied product
    UPDATE product
    SET qty = qty + NEW.qty_supplied
    WHERE product_id = NEW.product_id;
END$$

-- Change the delimiter back to semicolon
DELIMITER ;

-- Change the delimiter to $$
DELIMITER $$

-- Create the trigger to update product price after inserting into supplies
CREATE TRIGGER update_product_price AFTER INSERT ON supplies
FOR EACH ROW
BEGIN
    -- Calculate the new price based on the margin percentage
    DECLARE new_price DOUBLE;
    SET new_price = NEW.cost_per_piece + (NEW.cost_per_piece * NEW.margin_percentage/100);

    -- Update the price in the product table
    UPDATE product
    SET price = new_price
    WHERE product_id = NEW.product_id;
END$$

-- Change the delimiter back to semicolon
DELIMITER ;


INSERT INTO customer (first_name, last_name, phone_no, street, city, state, pin_code, password)
VALUES('a','a','123','a','a','a','123','a');
select * from order_details;

select * from product;
select * from cart;

select* from product;
select* from orders;
select* from order_details;
select* from vendor;
select* from product;
select * from customer;
select * from supplies;

describe orders;

INSERT INTO supplies (vendor_id, product_id, qty_supplied, date, time, cost_per_piece, total_cost, margin_percentage)
VALUES
(1, 1, 100, CURDATE(),  CURTIME(), 1.50, 150.00, 50);

SELECT CURDATE(); -- Returns the current date in 'YYYY-MM-DD' format
SELECT CURTIME();

desc product;
SHOW CREATE TABLE product;